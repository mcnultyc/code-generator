# Author - Carlos Antonio McNulty

# Design patterns inspired by examples found in "The GoF Design Patterns Reference".
# Examples for each design pattern are provided below. Please given the patterns
# meaningful names before generating them, as some placeholder names are the same.

# allowable keys for design-pattern include:
#       "abstract-factory",
#       "builder",
#       "chain",
#       "facade",
#       "factory-method",
#       "mediator",
#       "template-method",
#       "visitor"

conf = {
    name = "design patterns"
    title = "Design Patterns Configurations"
    path = "./src/main/java"                    # specify the path of generated .java files
}

tool-tips = [
    {
        design-pattern      = "Abstract Factory"
        factory             = "Defines an interface for creating a family of product object."
        concrete-factory    = "Implements the operations to create concrete product objects."
        product-a           = "Declares an interface for a type of ProductA."
        concrete-products-a = "Implementing subclasses of ProductA interface."
        product-b           = "Declares an interface for a type of ProductB."
        concrete-products-b = "Implementing subclasses of ProductB interface."
    },
    {
        design-pattern      = "Builder"
        builder             = "Defines an interface for creating parts of a complex object."
        concrete-builder    = "Implement the Builder interface by creating and assembling the parts of a complex object."
        complex-object      = "Represents complex object under construction."
        product             = "Simple interface for constituent parts of the complex object."
        concrete-products   = "Implement the interface for Product."

    },
    {
        design-pattern      = "Chain"
        sender              = "Refers to the Handler interface to handle a request."
        handler             = "Defines an interface for handling a request."
        concrete-handlers   = "Implement the Handler interface by either handling a request directly or forwarding it to the next handler."
    },
    {
        design-pattern  = "Facade"
        facade          = "Defines a simple interface for a complex subsystem."
        concrete-facade = "Implement the Facade interface."
        subsystems      = "Classes that fulfill requests delegated by Facade."
    },
    {
        design-pattern      = "Factory Method"
        creator             = "Defines an abstract factory method for creating a Product object."
        concrete-creator    = "Implements the abstract factory method."
        product             = "Interface for Product object."
        concrete-products   = "Implementing subclasses of Product interface."
    },
    {
        design-pattern      = "Mediator"
        mediator            = "Defines an interface for controlling and coordinating the interaction among colleagues."
        concrete-mediator   = "Implement the Mediator interface."
        colleague           = "Defines an abstract interface with a reference to a Mediator object."
        concrete-colleagues = "Implementing subclasses of Colleague interface."
    },
    {
        design-pattern      = "Template Method"
        template            = "Defines a template method operation that defines the skeleton (template) of a behavior by implementing the invariant parts of the behavior."
        concrete-template   = "Implement the abstract primitive operations of the template method."
        template-method     = "The name of the template method."
        primitives          = "The names of the primitives used in the template method."
    },
    {
        design-pattern      = "Visitor"
        element             = "Defines an interface for dispatching (delegating) client requests to a Visitor object."
        concrete-elements   = "Implement the dispatching Element interface."
        visitor             = "Defines a common interface for 'visiting' (performing an operation on) each Element class."
        concrete-visitor    = "Implement the Visitor interface."
    }
]

design-patterns = [
    {
        design-pattern      = "Abstract Factory" # design pattern name is lowercase hyphen-separated
        factory             = "Factory"          # class names expected to be in camelCase
        concrete-factory    = "Factory1"
        product-a           = "ProductA"
        concrete-products-a = [                  # list of subclasses
            "ProductA"
        ]
        product-b           = "ProductB"
        concrete-products-b = [
            "ProductB"
        ]
    },
    {
        design-pattern      = "Builder"
        builder             = "Builder"
        concrete-builder    = "Builder1"
        complex-object      = "ComplexObject"
        product             = "Product"
        concrete-products   = [
            "Product"
        ]

    },
    {
        design-pattern      = "Chain"
        sender              = "Sender"
        handler             = "Handler"
        concrete-handlers   = [
            "Receiver"
        ]
    },
    {
        design-pattern  = "Facade"
        facade          = "Facade"
        concrete-facade = "Facade1"
        subsystems      = [
            "Subsystem"
        ]
    },
    {
        design-pattern      = "Factory Method"
        creator             = "Creator"
        concrete-creator    = "Creator1"
        product             = "Product"
        concrete-products   = [
            "Product"
        ]
    },
    {
        design-pattern      = "Mediator"
        mediator            = "Mediator"
        concrete-mediator   = "Mediator1"
        colleague           = "Colleague"
        concrete-colleagues = [
            "Colleague"
        ]
    },
    {
        design-pattern      = "Template Method"
        template            = "Template"
        concrete-template   = "Template1"
        template-method     = "templateMethod"
        primitives          = [
            "primitive"
        ]
    },
    {
        design-pattern      = "Visitor"
        element             = "Element"
        concrete-elements   = [
            "Element"
        ]
        visitor             = "Visitor"
        concrete-visitor    = "Visitor1"
    }
]